---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpa-admission-controller
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vpa-admission-controller
  template:
    metadata:
      labels:
        app: vpa-admission-controller
    spec:
      serviceAccountName: vpa-admission-controller
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534 # nobody
      initContainers:
        - name: cert-generator
          image: alpine/openssl:latest
          command: [ "/bin/sh", "-c" ]
          volumeMounts:
            - name: tls-certs
              mountPath: "/tmp/vpa-certs"
          args:
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
              
              CN_BASE="vpa_webhook"
              TMP_DIR="/tmp/vpa-certs"
              
              echo "Generating certs for the VPA Admission Controller in ${TMP_DIR}."
              mkdir -p ${TMP_DIR}
              cat > ${TMP_DIR}/server.conf << EOF
              [req]
              req_extensions = v3_req
              distinguished_name = req_distinguished_name
              [req_distinguished_name]
              [ v3_req ]
              basicConstraints = CA:FALSE
              keyUsage = nonRepudiation, digitalSignature, keyEncipherment
              extendedKeyUsage = clientAuth, serverAuth
              subjectAltName = DNS:vpa-webhook.kube-system.svc
              EOF
              
              # Create a certificate authority
              openssl genrsa -out ${TMP_DIR}/caKey.pem 2048
              set +o errexit
              openssl req -x509 -new -nodes -key ${TMP_DIR}/caKey.pem -days 100000 -out ${TMP_DIR}/caCert.pem -subj "/CN=${CN_BASE}_ca" -addext "subjectAltName = DNS:${CN_BASE}_ca"
              if [[ $? -ne 0 ]]; then
                echo "ERROR: Failed to create CA certificate for self-signing. If the error is \"unknown option -addext\", update your openssl version or deploy VPA from the vpa-release-0.8 branch."
                exit 1
              fi
              set -o errexit
              
              # Create a server certificate
              openssl genrsa -out ${TMP_DIR}/serverKey.pem 2048
              # Note the CN is the DNS name of the service of the webhook.
              openssl req -new -key ${TMP_DIR}/serverKey.pem -out ${TMP_DIR}/server.csr -subj "/CN=vpa-webhook.kube-system.svc" -config ${TMP_DIR}/server.conf -addext "subjectAltName = DNS:vpa-webhook.kube-system.svc"
              openssl x509 -req -in ${TMP_DIR}/server.csr -CA ${TMP_DIR}/caCert.pem -CAkey ${TMP_DIR}/caKey.pem -CAcreateserial -out ${TMP_DIR}/serverCert.pem -days 100000 -extensions SAN -extensions v3_req -extfile ${TMP_DIR}/server.conf
      containers:
        - name: admission-controller
          image: registry.k8s.io/autoscaling/vpa-admission-controller:0.14.0
          imagePullPolicy: Always
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: tls-certs
              mountPath: "/etc/tls-certs"
              readOnly: true
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 50m
              memory: 200Mi
          ports:
            - containerPort: 8000
            - name: prometheus
              containerPort: 8944
      volumes:
        - name: tls-certs
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: vpa-webhook
  namespace: kube-system
spec:
  ports:
    - port: 443
      targetPort: 8000
  selector:
    app: vpa-admission-controller