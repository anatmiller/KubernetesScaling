/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	v1beta1 "k8s.io/autoscaler/vertical-pod-autoscaler/pkg/apis/autoscaling.k8s.io/v1beta1"
	"k8s.io/client-go/tools/cache"
)

// ClusterProportionalScalerLister helps list ClusterProportionalScalers.
type ClusterProportionalScalerLister interface {
	// List lists all ClusterProportionalScalers in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.ClusterProportionalScaler, err error)
	// ClusterProportionalScalers returns an object that can list and get ClusterProportionalScalers.
	ClusterProportionalScalers(namespace string) ClusterProportionalScalerNamespaceLister
	ClusterProportionalScalerListerExpansion
}

// clusterProportionalScalerLister implements the ClusterProportionalScalerLister interface.
type clusterProportionalScalerLister struct {
	indexer cache.Indexer
}

// NewClusterProportionalScalerLister returns a new ClusterProportionalScalerLister.
func NewClusterProportionalScalerLister(indexer cache.Indexer) ClusterProportionalScalerLister {
	return &clusterProportionalScalerLister{indexer: indexer}
}

// List lists all ClusterProportionalScalers in the indexer.
func (s *clusterProportionalScalerLister) List(selector labels.Selector) (ret []*v1beta1.ClusterProportionalScaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ClusterProportionalScaler))
	})
	return ret, err
}

// ClusterProportionalScalers returns an object that can list and get ClusterProportionalScalers.
func (s *clusterProportionalScalerLister) ClusterProportionalScalers(namespace string) ClusterProportionalScalerNamespaceLister {
	return clusterProportionalScalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterProportionalScalerNamespaceLister helps list and get ClusterProportionalScalers.
type ClusterProportionalScalerNamespaceLister interface {
	// List lists all ClusterProportionalScalers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.ClusterProportionalScaler, err error)
	// Get retrieves the ClusterProportionalScaler from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.ClusterProportionalScaler, error)
	ClusterProportionalScalerNamespaceListerExpansion
}

// clusterProportionalScalerNamespaceLister implements the ClusterProportionalScalerNamespaceLister
// interface.
type clusterProportionalScalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterProportionalScalers in the indexer for a given namespace.
func (s clusterProportionalScalerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ClusterProportionalScaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ClusterProportionalScaler))
	})
	return ret, err
}

// Get retrieves the ClusterProportionalScaler from the indexer for a given namespace and name.
func (s clusterProportionalScalerNamespaceLister) Get(name string) (*v1beta1.ClusterProportionalScaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("clusterproportionalscaler"), name)
	}
	return obj.(*v1beta1.ClusterProportionalScaler), nil
}
